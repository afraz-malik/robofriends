{"version":3,"sources":["reportWebVitals.js","components/CardMaker.js","components/SearchBox.js","components/Scroll.js","components/Error.js","constants.js","containers/App.js","reducers.js","actions.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","name","email","id","className","alt","src","CardMaker","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","Error","state","hasError","this","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","initialStateSearch","connect","searchRobots","requestRobots","error","dispatch","event","text","target","value","payload","fetch","response","json","data","initialStateRobots","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fbb57f38.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\n\r\n\r\nconst CardMaker = ({ robots }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t{\r\n\t\t\trobots.map( (user, i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card key = {i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\nconst Card = ({name,email,id}) => {\r\n\treturn(\r\n\t\t<div className=' tc bg-light-green dib br3 ma2 spa3 grow bw-2 shadow-5'>\r\n\t\t\t<img alt=\"robots\" src={`https://robohash.org/${id}?200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2> {name} </h2>\r\n\t\t\t\t<p> {email} </p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default CardMaker;","import React from 'react';\r\nconst SearchBox = ({ searchChange}) => {\r\n\treturn(\r\n\t<div className= 'pa2'>\r\n\t\t<input className='pa3 ba b--green bg-lightest-blue'  type= \"text\" placeholder=\"serach robots\" onChange={searchChange} />\r\n\t</div>\r\n\t);\r\n}\r\nexport default SearchBox;\t","import React from 'react';\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t<div style={{overflowY: 'scroll', border: '1px solid blue',  height: '500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass Error extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\thasError :false\r\n\t\t}\r\n\t}\r\n\trender(){\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1> Wooooooooooooooooooooo We have Errror </h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\nexport default Error;","// eslint-disable-next-line\r\nexport const CHANGE_SEARCH_FIELD= 'CHANGE_SEARCH_FIELD'; \r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CardMaker from '../components/CardMaker';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport Error from '../components/Error';\r\n// import robots from '../components/robots.js';\r\n\r\nimport { setSearchField, runRequestRobots } from  '../actions'\r\n\r\nimport './app.css';\r\n\r\nconst mapStateToProps = (state) =>{\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange : (event) =>dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(runRequestRobots())\r\n\t}\r\n}\r\n\r\nclass App extends Component{\r\n\tcomponentDidMount(){\r\n\t\tthis.props.onRequestRobots()\r\n\t}\r\n\trender(){\r\n\t\tconst {searchField, onSearchChange, robots, isPending} = this.props;\r\n\t\tconst filteredRobots = robots.filter(\r\n\t\t\trobot => {\r\n\t\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t\t}\r\n\t\t)\r\n\t\treturn isPending ? <h1 className=\"f1 tc\"> Loading </h1> :\r\n\t\t(\r\n\t\t\t<div className = 'tc' >\r\n\t\t\t\t<h1 className=\"f1\"> RoboFriends </h1>\r\n\t\t\t\t<SearchBox searchChange={onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<Error>\r\n\t\t\t\t\t\t<CardMaker robots={ filteredRobots }/>\r\n\t\t\t\t\t</Error>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\t\t\r\n\t}\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch={\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots=(state=initialStateSearch, action={}) =>{\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, {searchField: action.payload})\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nconst initialStateRobots={\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\nexport const requestRobots=(state=initialStateRobots, action={}) =>{\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, {isPending: true})\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, {robots:action.payload, isPending: false})\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, {error:action.payload, isPending:false})\t\r\n\tdefault:\r\n\t\treturn state;\r\n\t}\r\n}","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => {\r\n\treturn{\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n\t}\r\n}\r\nexport const runRequestRobots= () => (dispatch) => {\r\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response=>response.json())\r\n\t.then( data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n\t.then(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: 'wooooooooooooo eror'}))\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nimport { createStore,applyMiddleware, combineReducers} from 'redux';\r\nimport  {Provider}  from 'react-redux';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {createLogger} from 'redux-logger'\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport App from './containers/App';\r\nimport { searchRobots, requestRobots } from './reducers.js';\r\n\r\nimport './index.scss';\r\nimport 'tachyons';\r\n\r\nconst logger = createLogger();\r\nconst rootReducers = combineReducers({searchRobots, requestRobots})\r\nconst store = createStore(\r\n\trootReducers,applyMiddleware(thunkMiddleware, logger)\r\n);\r\n\r\nReactDOM.render(\r\n\t\t<Provider store={store}>\r\n\t\t\t{/* <App /> */}\r\n\t\t</Provider>,\r\n\t\tdocument.getElementById('root')\t\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}